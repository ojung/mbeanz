#!/usr/bin/env python

from __future__ import print_function
import json
import requests
import subprocess
import signal
import sys

PORT = [line.rstrip('\n') for line in open('/var/tmp/mbeanz.port')][0]
API_URL = 'http://localhost:' + PORT
SEPARATOR = '  '

signal.signal(signal.SIGINT, lambda x,y: sys.exit(0))

class colors:
    OKGREEN = '\033[92m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def get_mbeans(profile):
    response = requests.get(API_URL + '/' + profile + '/list')
    result = response.json()
    if ('error' in result):
        raise(Exception(result['error']['message']))
    return [mbean['bean'] + SEPARATOR + mbean['operation'] for mbean in result]

def fzf(stdin):
    fzf = subprocess.Popen('fzf', stdin = subprocess.PIPE, stdout = subprocess.PIPE)
    return fzf.communicate(stdin)[0]

def select_mbean(profile):
    mbeans = str.join('\n', get_mbeans(profile))
    mbean_operation = fzf(mbeans).rstrip('\n').split(SEPARATOR)
    return tuple(mbean_operation)

def get_signature_string(index, description):
    signature = description['signature']
    params = [parameter['name'] + ' (' + parameter['type'] + ')' for parameter in signature]
    return str(index) + ' ' + str.join(', ', params)

def choose_signature(descriptions):
    strings = '\n'.join([get_signature_string(i, descr) for i, descr in enumerate(descriptions)])
    index = fzf(strings).split(' ')[0]
    chosen = descriptions[int(index)]
    return tuple([chosen['description'], chosen['signature']])

def describe_mbean(profile, mbean, operation):
    mbean_infos = requests.get(API_URL + '/' + profile + '/describe/' + operation,
            params = {'bean': mbean}).json()
    length = len(mbean_infos)
    if (length == 1):
        only_operation = mbean_infos[0]
        return tuple([only_operation['description'], only_operation['signature']])
    if (length >= 2):
        return choose_signature(mbean_infos)

def get_arguments(description, signature):
    print(colors.BOLD + '\n' + description + colors.ENDC, end = '\n\n')
    arguments = []
    for parameter in signature:
        print(colors.BOLD + parameter['description'] + colors.ENDC, end = '\n')
        user_input = raw_input(parameter['name'] + ' (' + parameter['type'] + '): ')
        arguments.append(tuple([parameter['type'], user_input]))
    return arguments

def invoke_operation(profile, mbean, operation, arguments):
    types = [arg[0] for arg in arguments]
    values = [arg[1] for arg in arguments]
    query_parameters = {'bean': mbean, 'args': values, 'types': types}
    response = requests.get(API_URL + '/' + profile + '/invoke/' + operation,
            params = query_parameters)
    return response.json()

def print_result(result):
    if (result):
        if ('error' in result):
            print('\n' + colors.FAIL + result['error']['class'])
            print(result['error']['message'] + colors.ENDC, end = '\n\n')
        else:
            print('\n' + str(result['result']), end = '\n\n')

def print_usage():
    print('usage: mbeanz <profile name>')
    print('profiles are defined in /usr/local/etc/mbeanz.edn')

def get_profile(args):
    first = args[1]
    if (first == '--help' or first == '-h'):
        print_usage()
        sys.exit(0)
    return first

if __name__ == "__main__":
    try:
        profile = get_profile(sys.argv)
        mbean, operation = select_mbean(profile)
        description, signature = describe_mbean(profile, mbean, operation)
        arguments = get_arguments(description, signature)
        result = invoke_operation(profile, mbean, operation, arguments)
        print_result(result)
    except Exception as exception:
        if ('--debug' in sys.argv):
            raise(exception)
        if (not exception.message == ''):
            print(exception.message)
